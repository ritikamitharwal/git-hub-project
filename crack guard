import cv2 # type: ignore
import numpy as np # type: ignore

# Load the image
image = cv2.imread(r'c:\Users\Ritik\Desktop\crack.jpg.jpg', cv2.IMREAD_GRAYSCALE)

# Apply Gaussian blur to reduce noise
blurred = cv2.GaussianBlur(image, (5, 5), 0)

# Perform Canny edge detection
edges = cv2.Canny(blurred, threshold1=30, threshold2=100)

# Find contours in the edge map
contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Create a copy of the original image to draw contours on
result_image = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)

# Iterate through detected contours
for contour in contours:
    # Calculate the area of the contour
    area = cv2.contourArea(contour)

    # Define a threshold for considering a contour as a crack (you may need to adjust this)
    if area > 100:
        # Draw the contour on the result image
        cv2.drawContours(result_image, [contour], -1, (0, 255, 0), 2)

# Display the result image
cv2.imshow('Crack Detection', result_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

